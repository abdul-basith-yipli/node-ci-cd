name: Node.js CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  # test:
  #   runs-on: ubuntu-latest

  #   services:
  #     mongodb:
  #       image: mongo:5.0
  #       ports:
  #         - 27017:27017
  #       options: >-
  #         --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5

  #   steps:
  #     - name: 📥 Checkout code
  #       uses: actions/checkout@v4

  #     - name: 🟢 Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 22

  #     - name: 📦 Install dependencies
  #       run: npm install

  #     - name: 🧪 Run tests
  #       env:
  #         MONGO_URI: mongodb://localhost:27017/Node-CI-CD-test
  #       run: npm run test:coverage

  #     - name: 🔨 Build application
  #       run: npm run build

  deploy-dev:
    # if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: dev

    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: 📦 Install dependencies
        run: npm install

      - name: 🧪 Run tests
        env:
          MONGO_URI: mongodb://localhost:27017/Node-CI-CD-test
        run: npm run test:coverage

      - name: 🔠 Setup environment variables
        run: |
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}" >> .env
          echo "FEAT_HEALTH_CHECK=${{ secrets.FEAT_HEALTH_CHECK }}" >> .env
          echo "FEAT_AUTHENTICATION=${{ secrets.FEAT_AUTHENTICATION }}" >> .env

      - name: 🔨 Build application
        run: npm run build

      - name: 🗜️ Zip production files
        run: |
          zip -r build.zip dist package.json .env

      - name: ☁️ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: build.zip

      - name: ☁️ Download artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: .

      - name: Upload files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "build.zip"
          target: "/home/${{ secrets.EC2_USER }}"

      - name: 🔧 Run post-deploy commands
        run: |
          echo "Running post-deploy commands..."
          ssh -i ${{ secrets.EC2_SSH_KEY }} ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/${{ secrets.EC2_USER }}
            unzip -o build.zip -d app
            cd app
            ls -a
            npm ci --omit=dev
            pm2 reload node-app || pm2 start dist/server.js --name node-app
          EOF
          echo "Post-deploy commands completed."
